generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  followers     Follow[]  @relation("following")
  following     Follow[]  @relation("followers")
  notifications Notification[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  postVersions  PostVersion[]
}

model Post {
  id          String    @id @default(cuid())
  title       String
  content     String
  published   Boolean   @default(false)
  views       Int       @default(0)
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  tags        Tag[]
  comments    Comment[]
  likes       Like[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  versions    PostVersion[]
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @unique
  posts       Post[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id          String    @id @default(cuid())
  content     String
  post        Post      @relation(fields: [postId], references: [id])
  postId      String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Like {
  id          String    @id @default(cuid())
  post        Post      @relation(fields: [postId], references: [id])
  postId      String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime  @default(now())

  @@unique([postId, userId])
}

model Follow {
  id          String    @id @default(cuid())
  follower    User      @relation("following", fields: [followerId], references: [id])
  followerId  String
  following   User      @relation("followers", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime  @default(now())

  @@unique([followerId, followingId])
}

model Notification {
  id          String    @id @default(cuid())
  type        String    // "FOLLOW", "LIKE", "COMMENT"
  message     String
  read        Boolean   @default(false)
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  postId      String?
  createdAt   DateTime  @default(now())
}

model PostVersion {
  id          String    @id @default(cuid())
  post        Post      @relation(fields: [postId], references: [id])
  postId      String
  title       String
  content     String
  tags        String[]
  createdAt   DateTime  @default(now())
  createdBy   User      @relation(fields: [userId], references: [id])
  userId      String
} 